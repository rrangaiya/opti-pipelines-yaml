# Pipeline to deploy to DXP Integration environment using Deployment API
# Expects the following variables in a variable group named dxp-inte
#    - ApiKey
#    - ApiSecret
#    - ProjectId
#
# Author: Ron Rangaiya
# -----------------------------

# Set the pipeline build number format
name: 'CI.$(Date:yyyyMMdd).$(Rev:r)'

trigger:
- master

pool:
  vmimage: 'windows-2019'
  demands:
  - npm
  - msbuild
  - visualstudio
  - vstest

parameters:
- name: directDeploy
  displayName: Direct Deploy  
  type: boolean
  default: true
  
variables:
- template: variables.yml
- group: dxp-inte

stages:
- stage: CI
  jobs:
  - job: CI
    displayName: 'Build & package'
    steps:
    - task: NuGetToolInstaller@1
      displayName: "Install Nuget"
      inputs:
        versionSpec: 5.4.0

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '$(solution)'
        feedsToUse: config
        nugetConfigPath: '$(nugetConfig)'
        
# Run any npm commands to build UI artifacts
#    - task: Npm@1
#      displayName: 'Build UI'
#      inputs:
#        command: custom
#        workingDir: ''
#        verbose: false
#        customCommand: 'run build'

    - task: VSBuild@1
      displayName: "Build solution"
      inputs:
        solution: '$(solution)'
        msbuildArgs:
          /p:AutoParameterizationWebConfigConnectionStrings=false
          /p:DeployOnBuild=True
          /p:DeployDefaultTarget=WebPublish
          /p:WebPublishMethod=FileSystem
          /p:/PublishProvider=FileSystem
          /p:LastUsedBuildConfiguration=Release
          /p:ExcludeApp_Data=True
          /p:DeleteExistingFiles=True
          /p:publishUrl=$(build.ArtifactStagingDirectory)\PackageContent\wwwroot       
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      displayName: 'Run unit tests'
      inputs:
        testAssemblyVer2: |
          **\$(BuildConfiguration)\*test*.dll
          !**\obj\**
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: ArchiveFiles@2
      displayName: 'Zip CMS package'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/PackageContent/wwwroot'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(appName).cms.app.$(appVersion).nupkg'
        replaceExistingArchive: true  

    #[Optional] Task to zip commerce package

    - task: PowerShell@2
      displayName: 'Upload package to DXP'
      env:
        # Map secret variable
        API_SECRET: $(ApiSecret)
      inputs:
        targetType: 'inline'
        script: |
          $env:PSModulePath = "C:\Modules\azurerm_6.13.1;" + $env:PSModulePath
          
          if (-not (Get-Module -Name EpiCloud -ListAvailable)) {
              Install-Module EpiCloud -Scope CurrentUser -Force
          }
          
          Connect-EpiCloud -ClientKey $(ApiKey) -ClientSecret $env:API_SECRET -ProjectId $(ProjectId)
          
          $packagePath = "$(Build.ArtifactStagingDirectory)\$(appName).cms.app.$(appVersion).nupkg"
          
          $saslink = Get-EpiDeploymentPackageLocation
          
          Add-EpiDeploymentPackage -SasUrl $saslink -Path $packagePath
          
          #[Optional] Upload commerce package
          
- stage: Integration 
  jobs:
    # Add a Deployment job. 
    # Artifacts are automatically downloaded in deployment jobs. To disable use -download: none
  - deployment: DeployApp
    displayName: 'Deploy to Integration' 
    # Creates an environment if it doesnâ€™t exist
    environment: 'Integration'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: none

          - task: PowerShell@2
            displayName: 'Deploy to slot'
            env:
              API_SECRET: $(ApiSecret)
            inputs:
              targetType: 'inline'
              script: |
                if (-not (Get-Module -Name EpiCloud -ListAvailable)) {
                    Install-Module EpiCloud -Scope CurrentUser -Force
                }
                
                Connect-EpiCloud -ClientKey $(ApiKey) -ClientSecret $env:API_SECRET -ProjectId $(ProjectId)
                
                $packageName = "$(appName).cms.app.$(appVersion).nupkg"
                
                echo "Starting deployment using package $packageName" 
                
                $params = @{
                  DeploymentPackage = $packageName
                  TargetEnvironment = 'Preproduction'
                  UseMaintenancePage = $false
                  Wait = $true
                }
                
                if (${{ parameters.directDeploy }} -eq $true){                   
                    $deploy = Start-EpiDeployment @params -DirectDeploy
                } else {
                    $expectedStatus = "AwaitingVerification"
                    $deploy = Start-EpiDeployment @params
                }                
                
                echo "DeploymentId - $($deploy.id)" 
                echo "##vso[task.setvariable variable=deploymentId;]$($deploy.id)"
                
          - task: PowerShell@2
            displayName: 'Validate slot'
            condition: and(succeeded(), eq('${{ parameters.directDeploy }}', false))
            env:
              API_SECRET: $(ApiSecret)
            inputs:
              targetType: 'inline'
              script: |
                Connect-EpiCloud -ClientKey $(ApiKey) -ClientSecret $env:API_SECRET -ProjectId $(ProjectId)
                
                $deploy = Get-EpiDeployment -Id $env:DeploymentId
                
                if ($deploy.status -eq 'AwaitingVerification'){
                  $response = Invoke-WebRequest -Uri $deploy.validationLinks[0]
                  if ($response.StatusCode -ne 200){
                    echo "Smoke test of slot url failed"
                    exit 1
                  }
                }
                
          - task: PowerShell@2
            displayName: 'Reset'
            condition: and(failed(), eq('${{ parameters.directDeploy }}', false))
            env:
              API_SECRET: $(ApiSecret)            
            inputs:
              targetType: 'inline'
              script: |
                Connect-EpiCloud -ClientKey $(ApiKey) -ClientSecret $env:API_SECRET -ProjectId $(ProjectId)
                
                Reset-EpiDeployment -Id $env:DeploymentId -Wait
                
          - task: PowerShell@2
            displayName: 'Complete deployment'
            condition: and(succeeded(), eq('${{ parameters.directDeploy }}', false))
            env:
              API_SECRET: $(ApiSecret)
            inputs:
              targetType: 'inline'
              script: |
                Connect-EpiCloud -ClientKey $(ApiKey) -ClientSecret $env:API_SECRET -ProjectId $(ProjectId)
                
                Complete-EpiDeployment -Id $env:DeploymentId -Wait
          
         
